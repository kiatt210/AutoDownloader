/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autodownloader;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.http.Header;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author KICSI
 */
public class AutoDownloader {

    private static String LOGIN_URL = "https://ncore.cc/login.php";
    private static String INDEX_URL = "https://ncore.cc/index.php";
    private static String HR_URL = "https://ncore.cc/hitnrun.php";
    private static String LOGOUT_URL = "https://ncore.cc/exit.php?q=e2b15c186d3ba98426da131d8d8efc17";
    private static String USERNAME = "kiatt07";
    private static String PWD = "Baros16";
    private static String phpSessioId = "";
    private static HttpClient client;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws MalformedURLException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, InterruptedException {
        String urlParameters = "nev="+USERNAME+"&pass="+PWD+"&set_lang=hu&submitted=1";
        
        client = HttpClientBuilder.create().build();
        
        HttpPost loginP = new HttpPost(LOGIN_URL);
        
        ArrayList<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        postParameters.add(new BasicNameValuePair("nev", USERNAME));
        postParameters.add(new BasicNameValuePair("pass", PWD));
        postParameters.add(new BasicNameValuePair("set_lang", "hu"));
        postParameters.add(new BasicNameValuePair("submitted", "1"));
        
        loginP.setEntity(new UrlEncodedFormEntity(postParameters, "UTF-8"));        

        HttpResponse response = client.execute(loginP);
        setPhpSession(response);
        
        TimeUnit.SECONDS.sleep(5);
        
        doGet(INDEX_URL);
        
        TimeUnit.SECONDS.sleep(5);
        
        response = doGet(LOGOUT_URL);
        
        
        String content = getContent(response);
        Document hrDoc = getDocument(content);
        findTorrents(hrDoc);
    }
    
    private static HttpResponse doGet(String url) throws IOException{
        System.out.println("Start get url="+url);
        HttpGet get = new HttpGet(url);
        get.setHeader("Cookie","PHPSESSID="+phpSessioId+"; nyelv=hu; stilus=default");
        
        System.out.println("Header setted");
        
        HttpResponse response = client.execute(get);     
        printHeaders(response);
        
        System.out.println("Request executed");
        
        return response;
    }
    
    private static void printHeaders(HttpResponse response){
        //get all headers
        Header[] headers = response.getAllHeaders();
        for (Header header : headers) {
            System.out.println("Key: "+header.getName()+" = Value:"+header.getValue());           
        }
    }
    
    private static void setPhpSession(HttpResponse response){
        //get all headers
        Header[] headers = response.getAllHeaders();
        for (Header header : headers) {
            if(header.getName().equals("Set-Cookie") && header.getValue().startsWith("PHPSESSID=")){
                phpSessioId = header.getValue().split("PHPSESSID=")[1].replace("; path=/", "");
                System.out.println("PHPSESSID="+phpSessioId);
            }            
        }
    }
    
    private static String getContent(HttpResponse response) throws IOException{
        System.out.println("Get content");
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        StringBuilder responseStr = new StringBuilder(); 
        String line;
        System.out.println("Start read");
        while ((line = rd.readLine()) != null) {
          responseStr.append(line);
          responseStr.append('\r');
        }
        rd.close();
        
        
        String content = responseStr.toString();
        
        return content;
    }
    
    private static Document getDocument(String content) throws ParserConfigurationException, SAXException, IOException{
        System.out.println("Get document");
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder;
        InputSource is;
        builder = factory.newDocumentBuilder();
        is = new InputSource(new StringReader(content));
        Document doc = builder.parse(is);
        
        return doc;
    }
    
    private static void findTorrents(Document hrDocument) throws XPathExpressionException{
        System.out.println("Find torrents");
//        NodeList divs = hrDocument.getElementsByTagName("div");
//        for(int i=0; i<divs.getLength();i++){
//            System.out.println("Content: "+divs.item(i).getNodeValue());
//        }
        XPathFactory xPathfactory = XPathFactory.newInstance();
        XPath xpath = xPathfactory.newXPath();
        XPathExpression expr = xpath.compile("//div[@class='hnr_all'']");
        
        NodeList nods = (NodeList) expr.evaluate(hrDocument, XPathConstants.NODESET);
        
        System.out.println(nods.getLength());
    }
    
}

